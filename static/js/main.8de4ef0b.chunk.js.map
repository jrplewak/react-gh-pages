{"version":3,"sources":["dad.png","e59.png","pizza.png","preg.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","style","display","className","fontSize","src","dad","maxWidth","height","borderRadius","pic","pizza","preg","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wGAAAA,EAAOC,QAAU,IAA0B,iC,kBCA3CD,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,+NCqC5BC,MA7Bf,WACE,OACE,yBAAKC,MAAO,CAACC,QAAQ,QAAQC,UAAU,OACrC,yBAAKF,MAAO,CAAC,MAAQ,SAAS,WAAa,UACzC,gCAAS,wBAAIA,MAAO,CAACG,SAAS,SAC9B,yBAAKD,UAAU,GAAGE,IAAKC,IAAOL,MAAO,CAACM,SAAS,MAAMC,OAAO,OAAOC,aAAa,UADvE,oBAGjB,yBAAKN,UAAU,GAAGE,IAAKC,IAAOL,MAAO,CAACM,SAAS,MAAMC,OAAO,OAAOC,aAAa,YAGhF,yBAAKN,UAAU,GAAGE,IAAKK,IAAOT,MAAO,CAACM,SAAS,MAAMC,OAAO,OAAOC,aAAa,UAChF,yBAAKN,UAAU,GAAGE,IAAKM,IAASV,MAAO,CAACM,SAAS,MAAMC,OAAO,UAC9D,yBAAKL,UAAU,GAAGE,IAAKO,IAAQX,MAAO,CAACM,SAAS,MAAMC,OAAO,UAC7D,gCAAQ,sEACR,gCAAQ,4DAER,gCAAQ,uEACR,gCAAQ,wBAAIP,MAAO,CAAC,WAAc,gBAA1B,yBAER,gCAAQ,wBAAIA,MAAO,CAAC,WAAc,gBAA1B,iCACR,gCAAQ,wBAAIA,MAAO,CAAC,WAAc,gBAA1B,+BChBYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8de4ef0b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/dad.cee7897c.png\";","module.exports = __webpack_public_path__ + \"static/media/e59.712d6bbe.png\";","module.exports = __webpack_public_path__ + \"static/media/pizza.4c50647e.png\";","module.exports = __webpack_public_path__ + \"static/media/preg.e39d74a0.jpg\";","import React from 'react';\n\nimport './App.css';\nimport pic from '../src/e59.png'\nimport pizza from '../src/pizza.png'\nimport preg from '../src/preg.jpg'\nimport dad from '../src/dad.png'\n\nfunction App() {\n  return (\n    <div style={{display:'flex'}}className=\"App\" >\n      <div style={{'color':'yellow','background':'green'}}>\n        <center ><h1 style={{fontSize:'32px'}}>\n        <img className=\"\" src={dad}   style={{maxWidth:'30%',height:'auto',borderRadius:'80px'}} />\n        !jeeeeeefs pizza!\n<img className=\"\" src={dad}   style={{maxWidth:'30%',height:'auto',borderRadius:'80px'}} />\n        </h1></center>\n        \n<img className=\"\" src={pic}   style={{maxWidth:'30%',height:'auto',borderRadius:'80px'}} />\n<img className=\"\" src={pizza}   style={{maxWidth:'30%',height:'auto'}} />\n<img className=\"\" src={preg}   style={{maxWidth:'30%',height:'auto'}} />\n<center><h1>We only do pepperoni, cheese is extra</h1></center>\n<center><h1>world famlous pitzah! ah ha\n</h1></center>\n<center><h1>A STUFFED CRUST that WILL MAKE U BUST!</h1></center>\n<center><h1 style={{'fontFamily': 'Courier New'}}>FREE PERSONAL PETZAH</h1></center>\n  \n<center><h1 style={{'fontFamily': 'Courier New'}}>CALL NOW 24/7 FREE DELIVERY </h1></center>\n<center><h1 style={{'fontFamily': 'Courier New'}}>first order is FREE!!!!</h1></center>\n\n\n\n   </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}